// ** PROJECT SETTINGS ***
// ** NITO

// Helpers
@showBreakPoints   : false;  //Show the breakpoint helper in bottom right
@debug             : false;  //Show the baseline grid for vertical rhythm
@showGrid          : false;  //Show background for col classes

// Typography
@baseLineHeight: 36px;
@baseFontSize: 24px;
@baseLineHeightMobile: 27px;
@baseFontSizeMobile: 18px;

@mainFont: helvetica, arial, sans-serif;
@mainFontLight: helvetica, arial, sans-serif;
@supportFontLight: helvetica, arial, sans-serif;
@supportFontBold: helvetica, arial, sans-serif;
@symbolFont: "icomoon";

@fontSize-smallest: 10px;
@fontSize-smaller:  @baseFontSize*0.5;
@fontSize-small:    @baseFontSize*0.75;
@fontSize-base:     @baseFontSize;
@fontSize-large:    @baseFontSize*1.5;
@fontSize-larger:   @baseFontSize*2;
@fontSize-largest:  @baseFontSize*2.5;
@fontSize-jumbo:    @baseFontSize*3;

// Layout elements
@basePadding: (@baseLineHeight / @baseFontSize) * 1rem;
@px: 1/@baseFontSize * 1rem;

// Colors
// KLUGE

@colorTangerine : #FFC700;
@colorTangerineDark : #c99100;

@colorCorn      : #FFF7D9;
@colorZorba     : #9E9791;
@colorJudge     : #5D5248;
@colorGondola   : #363636;
@colorBokara    : #25211D;

@colorProfile       : @colorTangerine;
@colorProfileDark   : @colorTangerine;
@colorProfileLight  : @colorTangerine;

@colorNeutral       : @colorZorba;

@colorBorderLight   :#DDDDDD;
@colorBorderDark    :#A9AFB3;

@colorText          : @colorGondola;
@colorTextDark      : black;
@colorEmphasize     : @colorTangerine;
@colorLink          : @colorJudge;

// Global breakpoints
// 1px i em = 1/16 =  .0625em
@breakpointSmall   : 40em;
@breakpointMedium  : 50em;
@breakpointLarge   : 60em;
@maxWidth          : 66.66666666666667em;


// ** MIXINS ***

// BREAKPOINTS
@breakpoint-small-pluss-one: (@breakpointSmall + 1/@baseFontSize);
@breakpoint-medium-pluss-one: (@breakpointMedium + 1/@baseFontSize);
@breakpoint-large-pluss-one: (@breakpointLarge + 1/@baseFontSize);


@small: ~"  (max-width: 40em)";
@medium: ~"  (min-width: 40.0625em) and (max-width: 50em)";
@large: ~"  (min-width: 50.0625em)";
@medium-up: ~"  (min-width: 40.0625em)";
@medium-down: ~"  (max-width: 50em)";
@media-medium: ~"@media screen and (min-width: 60.0625em)";

// FONT IMPORT
// Font import if using local font files
.fontimport(@filename, @fontweight, @fontstyle){
  @font-face {
    font-family: "@{filename}";
    src: url('/UI/fonts/@{filename}.eot');
    src: url('/UI/fonts/@{filename}.eot?#iefix') format('embedded-opentype'),
    url('/UI/fonts/@{filename}.woff') format('woff'),
    url('/UI/fonts/@{filename}.ttf') format('truetype'),
    url('/UI/fonts/@{filename}.svg#UbuntuItalic') format('svg');
    font-weight: @fontweight;
    font-style: @fontstyle;
  }
}


// Establishing font size and baseline
.establishTypography(){
  font-family: @mainFont;
  font-size: (@baseFontSize / 16) * 1em;
  line-height: (@baseLineHeight / @baseFontSize) * 1em;
  color: @colorText;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  @media @medium-down{ // SMALL BREAKPOINT
    font-size: (@baseFontSizeMobile / 16) * 1em;
    line-height: (@baseLineHeightMobile / @baseFontSizeMobile) * 1em;
  }
  @media
  only screen and (-webkit-min-device-pixel-ratio: 1.25),
  only screen and ( min-device-pixel-ratio: 1.25),
  only screen and ( min-resolution: 200dpi),
  only screen and ( min-resolution: 1.25dppx)
  {
    -webkit-font-smoothing: subpixel-antialiased;
  }
}

// VERTICAL RHYTHM
// Define font size and number of @lineHeight in vertical ryhthm units
.font(@size, @lineHeight: 1){
  font-size: @size;
  font-size: @size/@baseFontSize * 1rem;
  line-height: (@baseLineHeight/@baseFontSize) * @lineHeight * 1rem;
}

// STANDARD CLEARFIX TO CLEAR FLOATS
.clearfix(){
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

.ellipsis() {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: ellipsis;
}


// CONTAINER
// Adds max widths and padding to an element. Wrap a row in a container to make a grid
.container(@padded: @basePadding){
  max-width: @maxWidth;
  margin: 0 auto;
  padding: 0 @padded;
  @media @small{
    padding-left: @basePadding/2;
    padding-right: @basePadding/2;
  }
  .clearfix();
}

// TRAILER
// Adds 1 baselineunit margin after an element
.trailer(@numberOfUnits: 1){
  margin-bottom: 1em;
  margin-bottom: (@baseLineHeight/@baseFontSize) * @numberOfUnits * 1rem;
  @media @small{ // SMALL BREAKPOINT
    margin-bottom: (@baseLineHeightMobile/@baseFontSizeMobile) * 1rem;
  }
}

// TRAILING BORDER
// Adds 1px border and a baselineunit padding and margin after an element
.trailer-border(@numberOfUnits: 1, @currentBorderColor: @colorBorderLight){
  margin-bottom: (@baseLineHeight/@baseFontSize) * @numberOfUnits * 1rem;
  padding-bottom: ((@baseLineHeight/@baseFontSize) * @numberOfUnits * 1rem) - 0.0625em;
  border-bottom: 0.0625em solid @currentBorderColor;
  @media @small { // SMALL BREAKPOINT
    margin-bottom: (@baseLineHeightMobile/@baseFontSizeMobile) * 1rem;
  }
}

// Border

.border(@color){
  border: 1px solid @color;
}

// Code helpers
// ****************************
.baseline() when (@debug = true){
  background: -webkit-gradient(linear, left top, left bottom, from(rgba(255,255,255,.0)), color-stop(95%, rgba(255,255,255,.0)), color-stop(95%, #4affff), to(#4affff));
  background: -moz-linear-gradient(top, #fcfcfc, #fcfcfc 95%, #4affff 95%, #4affff);
  border-width: 1px 1px 0 1px;
  border-color: #4affff;
  border-style: solid;
  @media @medium-up{
    background-size: auto @baseLineHeight/2;
  }
  @media @small{
    background-size: auto @baseLineHeightMobile/2;
  }
}
.displayGrid() when (@showGrid = true){

}



[class*=wrapper]{
  .baseline();
}



// Inject a small text  telling you wich breakpoint is the current one. Change body to the element you want to use
body{
  .helper(@showBreakPoints);
}

.helper(@debug) when (@debug = true){
  &:before{
    z-index: 400000;
    color: #4affff;
    text-align: right;
    position: fixed;
    bottom: 50px;
    right: 0;
    padding: 3px 10px;
    border-left: 1px solid #4affff;
    border-radius: 5px 0 0 5px;
    background: rgba(255, 255, 255, 0.2);
    opacity: 1;
    @media screen and (max-width: @breakpointSmall){
      content: "small";
    }
    @media screen and (min-width: @breakpointSmall) and (max-width: @breakpointMedium){
      content: "medium";
    }
    @media screen and (min-width: @breakpointMedium){
      content: "large";
    }
  }
}

// Visibility for various sizes

.hide-for-small() {
  @media @small{
    display: none !important;
  }
}

.hide-for-medium() {
  @media @medium{
    display: none !important;
  }
}

.hide-for-large() {
  @media @large{
    display: none !important;
  }
}


/////////////////
// Semantic.gs // for LESS: http://lesscss.org/
/////////////////

// Defaults which you can freely override
@column-width: 180;
@gutter-width: 20;
@columns: 8;

// Utility variable ï¿½ you should never need to modify this
@gridsystem-width: (@column-width*@columns) + (@gutter-width*@columns) * 1px;

// Set @total-width to 100% for a fluid layout
//@total-width: @gridsystem-width;
@total-width: 100%;

// Uncomment these two lines and the star-hack width/margin lines below to enable sub-pixel fix for IE6 & 7. See http://tylertate.com/blog/2012/01/05/subpixel-rounding.html
// @min-width: 960;
// @correction: 0.5 / @min-width * 100 * 1%;


//////////
// GRID //
//////////


.row(@columns:@columns) {
  display: block;
  width: @total-width*((@gutter-width + @gridsystem-width)/@gridsystem-width);
  margin: 0 @total-width*(((@gutter-width*.5)/@gridsystem-width)*-1);
  .clearfix;
}
.column(@x,@columns:@columns, @position: left) {
  display: inline;
  float: @position;
  width: @total-width*((((@gutter-width+@column-width)*@x)-@gutter-width) / @gridsystem-width);
  margin: 0 @total-width*((@gutter-width*.5)/@gridsystem-width);

}
.push(@offset:1) {
  margin-left: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}
.pull(@offset:1) {
  margin-right: @total-width*(((@gutter-width+@column-width)*@offset) / @gridsystem-width) + @total-width*((@gutter-width*.5)/@gridsystem-width);
}